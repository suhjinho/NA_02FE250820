<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\Objects\KEIL_proj.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\Objects\KEIL_proj.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060960: Last Updated: Wed Aug 20 10:13:03 2025
<BR><P>
<H3>Maximum Stack Usage =        120 bytes + Unknown(Functions without stacksize, Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
__rt_entry_main &rArr; main &rArr; task_idle &rArr; modbus_loop &rArr; modbus_save_data &rArr; set_app_data &rArr; save_data &rArr; I2C_Configure &rArr; HAL_I2C_Init
<P>
<H3>
Functions with no stack information
</H3><UL>
 <LI><a href="#[58]">__user_initial_stackheap</a>
</UL>
</UL>
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[1f]">NMI_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1f]">NMI_Handler</a><BR>
 <LI><a href="#[21]">SVC_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[21]">SVC_Handler</a><BR>
 <LI><a href="#[22]">PendSV_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[22]">PendSV_Handler</a><BR>
 <LI><a href="#[3a]">NULL_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[3a]">NULL_IRQHandler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[36]">ADC_IRQHandler</a> from startup_a31g21x.o(.text) referenced from startup_a31g21x.o(RESET)
 <LI><a href="#[3f]">CRC_IRQHandler</a> from startup_a31g21x.o(.text) referenced from startup_a31g21x.o(RESET)
 <LI><a href="#[27]">GPIOAB_IRQHandler</a> from startup_a31g21x.o(.text) referenced from startup_a31g21x.o(RESET)
 <LI><a href="#[28]">GPIOCD_IRQHandler</a> from startup_a31g21x.o(.text) referenced from startup_a31g21x.o(RESET)
 <LI><a href="#[29]">GPIOE_IRQHandler</a> from startup_a31g21x.o(.text) referenced from startup_a31g21x.o(RESET)
 <LI><a href="#[2a]">GPIOF_IRQHandler</a> from startup_a31g21x.o(.text) referenced from startup_a31g21x.o(RESET)
 <LI><a href="#[20]">HardFault_Handler</a> from irq.o(i.HardFault_Handler) referenced from startup_a31g21x.o(RESET)
 <LI><a href="#[2e]">I2C0_IRQHandler</a> from startup_a31g21x.o(.text) referenced from startup_a31g21x.o(RESET)
 <LI><a href="#[32]">I2C1_IRQHandler</a> from startup_a31g21x.o(.text) referenced from startup_a31g21x.o(RESET)
 <LI><a href="#[3d]">LED_IRQHandler</a> from startup_a31g21x.o(.text) referenced from startup_a31g21x.o(RESET)
 <LI><a href="#[24]">LVI_IRQHandler</a> from startup_a31g21x.o(.text) referenced from startup_a31g21x.o(RESET)
 <LI><a href="#[1f]">NMI_Handler</a> from startup_a31g21x.o(.text) referenced from startup_a31g21x.o(RESET)
 <LI><a href="#[3a]">NULL_IRQHandler</a> from startup_a31g21x.o(.text) referenced 5 times from startup_a31g21x.o(RESET)
 <LI><a href="#[22]">PendSV_Handler</a> from startup_a31g21x.o(.text) referenced from startup_a31g21x.o(RESET)
 <LI><a href="#[1e]">Reset_Handler</a> from startup_a31g21x.o(.text) referenced from startup_a31g21x.o(RESET)
 <LI><a href="#[3b]">SPI20_IRQHandler</a> from startup_a31g21x.o(.text) referenced from startup_a31g21x.o(RESET)
 <LI><a href="#[3c]">SPI21_IRQHandler</a> from startup_a31g21x.o(.text) referenced from startup_a31g21x.o(RESET)
 <LI><a href="#[21]">SVC_Handler</a> from startup_a31g21x.o(.text) referenced from startup_a31g21x.o(RESET)
 <LI><a href="#[25]">SYSCLKFAIL_IRQHandler</a> from startup_a31g21x.o(.text) referenced from startup_a31g21x.o(RESET)
 <LI><a href="#[23]">SysTick_Handler</a> from irq.o(i.SysTick_Handler) referenced from startup_a31g21x.o(RESET)
 <LI><a href="#[41]">SystemCoreClockUpdate</a> from system_a31g21x.o(i.SystemCoreClockUpdate) referenced from startup_a31g21x.o(.text)
 <LI><a href="#[40]">SystemInit</a> from system_a31g21x.o(i.SystemInit) referenced from startup_a31g21x.o(.text)
 <LI><a href="#[2b]">TIMER10_IRQHandler</a> from irq.o(i.TIMER10_IRQHandler) referenced from startup_a31g21x.o(RESET)
 <LI><a href="#[2c]">TIMER11_IRQHandler</a> from startup_a31g21x.o(.text) referenced from startup_a31g21x.o(RESET)
 <LI><a href="#[2d]">TIMER12_IRQHandler</a> from startup_a31g21x.o(.text) referenced from startup_a31g21x.o(RESET)
 <LI><a href="#[39]">TIMER13_IRQHandler</a> from startup_a31g21x.o(.text) referenced from startup_a31g21x.o(RESET)
 <LI><a href="#[33]">TIMER20_IRQHandler</a> from startup_a31g21x.o(.text) referenced from startup_a31g21x.o(RESET)
 <LI><a href="#[34]">TIMER21_IRQHandler</a> from startup_a31g21x.o(.text) referenced from startup_a31g21x.o(RESET)
 <LI><a href="#[31]">TIMER30_IRQHandler</a> from startup_a31g21x.o(.text) referenced from startup_a31g21x.o(RESET)
 <LI><a href="#[3e]">TOUCH_IRQHandler</a> from startup_a31g21x.o(.text) referenced from startup_a31g21x.o(RESET)
 <LI><a href="#[37]">UART0_IRQHandler</a> from startup_a31g21x.o(.text) referenced from startup_a31g21x.o(RESET)
 <LI><a href="#[38]">UART1_IRQHandler</a> from startup_a31g21x.o(.text) referenced from startup_a31g21x.o(RESET)
 <LI><a href="#[2f]">USART10_IRQHandler</a> from startup_a31g21x.o(.text) referenced from startup_a31g21x.o(RESET)
 <LI><a href="#[35]">USART11_IRQHandler</a> from irq.o(i.USART11_IRQHandler) referenced from startup_a31g21x.o(RESET)
 <LI><a href="#[26]">WDT_IRQHandler</a> from startup_a31g21x.o(.text) referenced from startup_a31g21x.o(RESET)
 <LI><a href="#[30]">WT_IRQHandler</a> from startup_a31g21x.o(.text) referenced from startup_a31g21x.o(RESET)
 <LI><a href="#[43]">__main</a> from __main.o(!!!main) referenced from startup_a31g21x.o(.text)
 <LI><a href="#[15]">setting_broken_chk</a> from app_setting.o(i.setting_broken_chk) referenced 2 times from app_setting.o(.data)
 <LI><a href="#[f]">setting_broken_sv1</a> from app_setting.o(i.setting_broken_sv1) referenced 2 times from app_setting.o(.data)
 <LI><a href="#[10]">setting_broken_sv2</a> from app_setting.o(i.setting_broken_sv2) referenced 2 times from app_setting.o(.data)
 <LI><a href="#[17]">setting_buzzer</a> from app_setting.o(i.setting_buzzer) referenced 2 times from app_setting.o(.data)
 <LI><a href="#[1d]">setting_exit</a> from app_setting.o(i.setting_exit) referenced 2 times from app_setting.o(.data)
 <LI><a href="#[1c]">setting_factort_reset</a> from app_setting.o(i.setting_factort_reset) referenced 2 times from app_setting.o(.data)
 <LI><a href="#[14]">setting_h2o_dry</a> from app_setting.o(i.setting_h2o_dry) referenced 2 times from app_setting.o(.data)
 <LI><a href="#[13]">setting_h2o_rel</a> from app_setting.o(i.setting_h2o_rel) referenced 2 times from app_setting.o(.data)
 <LI><a href="#[1a]">setting_modbus_id</a> from app_setting.o(i.setting_modbus_id) referenced 2 times from app_setting.o(.data)
 <LI><a href="#[19]">setting_modbus_v</a> from app_setting.o(i.setting_modbus_v) referenced 2 times from app_setting.o(.data)
 <LI><a href="#[5]">setting_normal1</a> from app_setting.o(i.setting_normal1) referenced 2 times from app_setting.o(.data)
 <LI><a href="#[6]">setting_normal2</a> from app_setting.o(i.setting_normal2) referenced 2 times from app_setting.o(.data)
 <LI><a href="#[1b]">setting_recovery_md</a> from app_setting.o(i.setting_recovery_md) referenced 2 times from app_setting.o(.data)
 <LI><a href="#[18]">setting_relay_out_md</a> from app_setting.o(i.setting_relay_out_md) referenced 2 times from app_setting.o(.data)
 <LI><a href="#[16]">setting_short_chk</a> from app_setting.o(i.setting_short_chk) referenced 2 times from app_setting.o(.data)
 <LI><a href="#[11]">setting_short_sv1</a> from app_setting.o(i.setting_short_sv1) referenced 2 times from app_setting.o(.data)
 <LI><a href="#[12]">setting_short_sv2</a> from app_setting.o(i.setting_short_sv2) referenced 2 times from app_setting.o(.data)
 <LI><a href="#[b]">setting_snr_dt1</a> from app_setting.o(i.setting_snr_dt1) referenced 2 times from app_setting.o(.data)
 <LI><a href="#[c]">setting_snr_dt2</a> from app_setting.o(i.setting_snr_dt2) referenced 2 times from app_setting.o(.data)
 <LI><a href="#[7]">setting_snr_min1</a> from app_setting.o(i.setting_snr_min1) referenced 2 times from app_setting.o(.data)
 <LI><a href="#[8]">setting_snr_min2</a> from app_setting.o(i.setting_snr_min2) referenced 2 times from app_setting.o(.data)
 <LI><a href="#[d]">setting_snr_pt1</a> from app_setting.o(i.setting_snr_pt1) referenced 2 times from app_setting.o(.data)
 <LI><a href="#[e]">setting_snr_pt2</a> from app_setting.o(i.setting_snr_pt2) referenced 2 times from app_setting.o(.data)
 <LI><a href="#[9]">setting_snr_sv_max1</a> from app_setting.o(i.setting_snr_sv_max1) referenced 2 times from app_setting.o(.data)
 <LI><a href="#[a]">setting_snr_sv_max2</a> from app_setting.o(i.setting_snr_sv_max2) referenced 2 times from app_setting.o(.data)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[43]"></a>__main</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, __main.o(!!!main))
<BR><BR>[Calls]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[44]"></a>__scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter))
<BR><BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[46]"></a>__scatterload_rt2</STRONG> (Thumb, 52 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[f8]"></a>__scatterload_rt2_thumb_only</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[f9]"></a>__scatterload_null</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[fa]"></a>__scatterload_zeroinit</STRONG> (Thumb, 28 bytes, Stack size unknown bytes, __scatter_zi.o(!!handler_zi), UNUSED)

<P><STRONG><a name="[4a]"></a>__rt_lib_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit.o(.ARM.Collect$$libinit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_li
</UL>

<P><STRONG><a name="[fb]"></a>__rt_lib_init_alloca_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002E))

<P><STRONG><a name="[fc]"></a>__rt_lib_init_argv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002C))

<P><STRONG><a name="[fd]"></a>__rt_lib_init_atexit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001B))

<P><STRONG><a name="[fe]"></a>__rt_lib_init_clock_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000021))

<P><STRONG><a name="[ff]"></a>__rt_lib_init_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000032))

<P><STRONG><a name="[100]"></a>__rt_lib_init_exceptions_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000030))

<P><STRONG><a name="[101]"></a>__rt_lib_init_fp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000002))

<P><STRONG><a name="[102]"></a>__rt_lib_init_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001F))

<P><STRONG><a name="[103]"></a>__rt_lib_init_getenv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000023))

<P><STRONG><a name="[104]"></a>__rt_lib_init_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000A))

<P><STRONG><a name="[105]"></a>__rt_lib_init_lc_collate_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000011))

<P><STRONG><a name="[106]"></a>__rt_lib_init_lc_ctype_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000013))

<P><STRONG><a name="[107]"></a>__rt_lib_init_lc_monetary_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000015))

<P><STRONG><a name="[108]"></a>__rt_lib_init_lc_numeric_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000017))

<P><STRONG><a name="[109]"></a>__rt_lib_init_lc_time_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000019))

<P><STRONG><a name="[10a]"></a>__rt_lib_init_preinit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000004))

<P><STRONG><a name="[10b]"></a>__rt_lib_init_rand_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000E))

<P><STRONG><a name="[10c]"></a>__rt_lib_init_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000033))

<P><STRONG><a name="[10d]"></a>__rt_lib_init_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001D))

<P><STRONG><a name="[10e]"></a>__rt_lib_init_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000025))

<P><STRONG><a name="[10f]"></a>__rt_lib_init_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000C))

<P><STRONG><a name="[4f]"></a>__rt_lib_shutdown</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown.o(.ARM.Collect$$libshutdown$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_ls
</UL>

<P><STRONG><a name="[110]"></a>__rt_lib_shutdown_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000004))

<P><STRONG><a name="[111]"></a>__rt_lib_shutdown_fini_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000002))

<P><STRONG><a name="[112]"></a>__rt_lib_shutdown_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000009))

<P><STRONG><a name="[113]"></a>__rt_lib_shutdown_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000011))

<P><STRONG><a name="[114]"></a>__rt_lib_shutdown_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000012))

<P><STRONG><a name="[115]"></a>__rt_lib_shutdown_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000C))

<P><STRONG><a name="[116]"></a>__rt_lib_shutdown_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000006))

<P><STRONG><a name="[117]"></a>__rt_lib_shutdown_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000E))

<P><STRONG><a name="[45]"></a>__rt_entry</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry.o(.ARM.Collect$$rtentry$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_rt2
</UL>

<P><STRONG><a name="[118]"></a>__rt_entry_presh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000002))

<P><STRONG><a name="[47]"></a>__rt_entry_sh</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry4.o(.ARM.Collect$$rtentry$$00000004))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_entry_sh &rArr; __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[49]"></a>__rt_entry_li</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000A))
<BR><BR>[Calls]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init
</UL>

<P><STRONG><a name="[119]"></a>__rt_entry_postsh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000009))

<P><STRONG><a name="[4b]"></a>__rt_entry_main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000D))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + Unknown Stack Size
<LI>Call Chain = __rt_entry_main &rArr; main &rArr; task_idle &rArr; modbus_loop &rArr; modbus_save_data &rArr; set_app_data &rArr; save_data &rArr; I2C_Configure &rArr; HAL_I2C_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[11a]"></a>__rt_entry_postli_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000C))

<P><STRONG><a name="[5a]"></a>__rt_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit.o(.ARM.Collect$$rtexit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[4e]"></a>__rt_exit_ls</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000003))
<BR><BR>[Calls]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown
</UL>

<P><STRONG><a name="[11b]"></a>__rt_exit_prels_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000002))

<P><STRONG><a name="[50]"></a>__rt_exit_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>

<P><STRONG><a name="[1e]"></a>Reset_Handler</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, startup_a31g21x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_a31g21x.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_a31g21x.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_a31g21x.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_a31g21x.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_a31g21x.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_a31g21x.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_a31g21x.o(RESET)
</UL>
<P><STRONG><a name="[36]"></a>ADC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_a31g21x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_a31g21x.o(RESET)
</UL>
<P><STRONG><a name="[3f]"></a>CRC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_a31g21x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_a31g21x.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>GPIOAB_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_a31g21x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_a31g21x.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>GPIOCD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_a31g21x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_a31g21x.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>GPIOE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_a31g21x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_a31g21x.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>GPIOF_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_a31g21x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_a31g21x.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>I2C0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_a31g21x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_a31g21x.o(RESET)
</UL>
<P><STRONG><a name="[32]"></a>I2C1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_a31g21x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_a31g21x.o(RESET)
</UL>
<P><STRONG><a name="[3d]"></a>LED_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_a31g21x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_a31g21x.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>LVI_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_a31g21x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_a31g21x.o(RESET)
</UL>
<P><STRONG><a name="[3b]"></a>SPI20_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_a31g21x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_a31g21x.o(RESET)
</UL>
<P><STRONG><a name="[3c]"></a>SPI21_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_a31g21x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_a31g21x.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>SYSCLKFAIL_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_a31g21x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_a31g21x.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>TIMER11_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_a31g21x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_a31g21x.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>TIMER12_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_a31g21x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_a31g21x.o(RESET)
</UL>
<P><STRONG><a name="[39]"></a>TIMER13_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_a31g21x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_a31g21x.o(RESET)
</UL>
<P><STRONG><a name="[33]"></a>TIMER20_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_a31g21x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_a31g21x.o(RESET)
</UL>
<P><STRONG><a name="[34]"></a>TIMER21_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_a31g21x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_a31g21x.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>TIMER30_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_a31g21x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_a31g21x.o(RESET)
</UL>
<P><STRONG><a name="[3e]"></a>TOUCH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_a31g21x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_a31g21x.o(RESET)
</UL>
<P><STRONG><a name="[37]"></a>UART0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_a31g21x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_a31g21x.o(RESET)
</UL>
<P><STRONG><a name="[38]"></a>UART1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_a31g21x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_a31g21x.o(RESET)
</UL>
<P><STRONG><a name="[2f]"></a>USART10_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_a31g21x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_a31g21x.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>WDT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_a31g21x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_a31g21x.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>WT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_a31g21x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_a31g21x.o(RESET)
</UL>
<P><STRONG><a name="[58]"></a>__user_initial_stackheap</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, startup_a31g21x.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[11c]"></a>__aeabi_uidiv</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, aeabi_sdiv.o(.text), UNUSED)

<P><STRONG><a name="[6e]"></a>__aeabi_uidivmod</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, aeabi_sdiv.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Init
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_avg
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensing_loop
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_USART_set_divisors
</UL>

<P><STRONG><a name="[11d]"></a>__aeabi_idiv</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, aeabi_sdiv.o(.text), UNUSED)

<P><STRONG><a name="[67]"></a>__aeabi_idivmod</STRONG> (Thumb, 326 bytes, Stack size 8 bytes, aeabi_sdiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_idivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_snr_st
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addq
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;deleteq
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsFull
<LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setting_snr_sv_max2
<LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setting_snr_sv_max1
<LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setting_snr_pt2
<LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setting_snr_pt1
<LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setting_snr_min2
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setting_snr_min1
<LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setting_snr_dt2
<LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setting_snr_dt1
<LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setting_short_sv2
<LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setting_short_sv1
<LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setting_normal2
<LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setting_normal1
<LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setting_modbus_v
<LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setting_modbus_id
<LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setting_factort_reset
<LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setting_broken_sv2
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setting_broken_sv1
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;itoa
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setting
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;normal
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FND_loop
</UL>

<P><STRONG><a name="[11e]"></a>__use_two_region_memory</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[11f]"></a>__rt_heap_escrow$2region</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[120]"></a>__rt_heap_expand$2region</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[b5]"></a>__aeabi_fdiv</STRONG> (Thumb, 0 bytes, Stack size 20 bytes, fdiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = __aeabi_fdiv
</UL>
<BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_snr_st
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_avg_f
</UL>

<P><STRONG><a name="[53]"></a>_fdiv</STRONG> (Thumb, 334 bytes, Stack size 20 bytes, fdiv.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_frdiv
</UL>

<P><STRONG><a name="[52]"></a>_frdiv</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, fdiv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fdiv
</UL>

<P><STRONG><a name="[bb]"></a>__aeabi_f2iz</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, ffixi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_f2iz
</UL>
<BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_snr_st
</UL>

<P><STRONG><a name="[121]"></a>_ffix</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, ffixi.o(.text), UNUSED)

<P><STRONG><a name="[55]"></a>__aeabi_i2f_normalise</STRONG> (Thumb, 72 bytes, Stack size 0 bytes, fflti.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
</UL>

<P><STRONG><a name="[54]"></a>__aeabi_i2f</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, fflti.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f_normalise
</UL>

<P><STRONG><a name="[122]"></a>_fflt</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, fflti.o(.text), UNUSED)

<P><STRONG><a name="[56]"></a>__aeabi_ui2f</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, fflti.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f_normalise
</UL>
<BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_avg_f
</UL>

<P><STRONG><a name="[123]"></a>_ffltu</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, fflti.o(.text), UNUSED)

<P><STRONG><a name="[48]"></a>__user_setup_stackheap</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, sys_stackheap_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_initial_stackheap
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_perproc_libspace
</UL>
<BR>[Called By]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_sh
</UL>

<P><STRONG><a name="[4d]"></a>exit</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, exit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = exit
</UL>
<BR>[Calls]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_call_atexit_fns (Weak Reference)
</UL>
<BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[124]"></a>__user_libspace</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[57]"></a>__user_perproc_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[125]"></a>__user_perthread_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[51]"></a>_sys_exit</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, sys_exit.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_exit
</UL>

<P><STRONG><a name="[126]"></a>__I$use$semihosting</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[127]"></a>__use_no_semihosting_swi</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[128]"></a>__decompress</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dczerorl.o(.text), UNUSED)

<P><STRONG><a name="[129]"></a>__decompress0</STRONG> (Thumb, 58 bytes, Stack size unknown bytes, __dczerorl.o(.text), UNUSED)

<P><STRONG><a name="[12a]"></a>__semihosting_library_function</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, indicate_semi.o(.text), UNUSED)

<P><STRONG><a name="[5b]"></a>ADC_Configure</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, hal.o(i.ADC_Configure))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = ADC_Configure &rArr; Error_Handler &rArr; fnd_put_line
</UL>
<BR>[Calls]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_Init
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_ConfigInterrupt
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SetPriority
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_EnableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_start
</UL>

<P><STRONG><a name="[5d]"></a>Error_Handler</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, hal.o(i.Error_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Error_Handler &rArr; fnd_put_line
</UL>
<BR>[Calls]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fnd_set_blink
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fnd_put_line
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WDT_Configure
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_USART11Configure
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER3n_Configure
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER1n_Configure
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Configure
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Configure
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_data
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;load_data
</UL>

<P><STRONG><a name="[63]"></a>FMC_WriteEraseRun</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, app_ctl.o(i.FMC_WriteEraseRun))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = FMC_WriteEraseRun &rArr; tt_flash_iap_pgm &rArr; ProgramPage
</UL>
<BR>[Calls]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tt_flash_iap_pgm
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init
</UL>

<P><STRONG><a name="[66]"></a>FND_Seg</STRONG> (Thumb, 150 bytes, Stack size 0 bytes, fnd.o(i.FND_Seg))
<BR><BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FND_loop
</UL>

<P><STRONG><a name="[65]"></a>FND_loop</STRONG> (Thumb, 276 bytes, Stack size 8 bytes, fnd.o(i.FND_loop))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = FND_loop &rArr; __aeabi_idivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FND_Seg
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_1ms_interrupt
</UL>

<P><STRONG><a name="[68]"></a>GPIO_Configure</STRONG> (Thumb, 848 bytes, Stack size 8 bytes, hal.o(i.GPIO_Configure))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = GPIO_Configure &rArr; HAL_GPIO_ConfigOutput
</UL>
<BR>[Calls]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_ConfigPullup
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_ConfigOutput
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_ConfigFunction
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_ClearPin
</UL>
<BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_start
</UL>

<P><STRONG><a name="[af]"></a>HAL_ADC_ChannelSel</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, a31g21x_hal_adc.o(i.HAL_ADC_ChannelSel))
<BR><BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_ADC_data
</UL>

<P><STRONG><a name="[ae]"></a>HAL_ADC_ClearStatus</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, a31g21x_hal_adc.o(i.HAL_ADC_ClearStatus))
<BR><BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_ADC_data
</UL>

<P><STRONG><a name="[5e]"></a>HAL_ADC_ConfigInterrupt</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, a31g21x_hal_adc.o(i.HAL_ADC_ConfigInterrupt))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_ADC_ConfigInterrupt
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Configure
</UL>

<P><STRONG><a name="[b2]"></a>HAL_ADC_GetData</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, a31g21x_hal_adc.o(i.HAL_ADC_GetData))
<BR><BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_ADC_data
</UL>

<P><STRONG><a name="[b1]"></a>HAL_ADC_GetStatus</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, a31g21x_hal_adc.o(i.HAL_ADC_GetStatus))
<BR><BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_ADC_data
</UL>

<P><STRONG><a name="[5c]"></a>HAL_ADC_Init</STRONG> (Thumb, 104 bytes, Stack size 8 bytes, a31g21x_hal_adc.o(i.HAL_ADC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_ADC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Configure
</UL>

<P><STRONG><a name="[b0]"></a>HAL_ADC_Start</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, a31g21x_hal_adc.o(i.HAL_ADC_Start))
<BR><BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_ADC_data
</UL>

<P><STRONG><a name="[6b]"></a>HAL_GPIO_ClearPin</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, a31g21x_hal_pcu.o(i.HAL_GPIO_ClearPin))
<BR><BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Configure
</UL>

<P><STRONG><a name="[6c]"></a>HAL_GPIO_ConfigFunction</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, a31g21x_hal_pcu.o(i.HAL_GPIO_ConfigFunction))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_GPIO_ConfigFunction
</UL>
<BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Configure
</UL>

<P><STRONG><a name="[69]"></a>HAL_GPIO_ConfigOutput</STRONG> (Thumb, 86 bytes, Stack size 20 bytes, a31g21x_hal_pcu.o(i.HAL_GPIO_ConfigOutput))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = HAL_GPIO_ConfigOutput
</UL>
<BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Configure
</UL>

<P><STRONG><a name="[6a]"></a>HAL_GPIO_ConfigPullup</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, a31g21x_hal_pcu.o(i.HAL_GPIO_ConfigPullup))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_GPIO_ConfigPullup
</UL>
<BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Configure
</UL>

<P><STRONG><a name="[73]"></a>HAL_I2C_DeInit</STRONG> (Thumb, 68 bytes, Stack size 0 bytes, a31g21x_hal_i2c.o(i.HAL_I2C_DeInit))
<BR><BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Configure
</UL>

<P><STRONG><a name="[6d]"></a>HAL_I2C_Init</STRONG> (Thumb, 180 bytes, Stack size 16 bytes, a31g21x_hal_i2c.o(i.HAL_I2C_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_I2C_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Configure
</UL>

<P><STRONG><a name="[97]"></a>HAL_SCU_ClearResetStatus</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, a31g21x_hal_scu.o(i.HAL_SCU_ClearResetStatus))
<BR><BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WDT_Configure
</UL>

<P><STRONG><a name="[7c]"></a>HAL_SCU_HSI_ClockConfig</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, a31g21x_hal_scu.o(i.HAL_SCU_HSI_ClockConfig))
<BR><BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[94]"></a>HAL_SCU_LSI_ClockConfig</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, a31g21x_hal_scu.o(i.HAL_SCU_LSI_ClockConfig))
<BR><BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WDT_Configure
</UL>

<P><STRONG><a name="[96]"></a>HAL_SCU_SetResetSrc</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, a31g21x_hal_scu.o(i.HAL_SCU_SetResetSrc))
<BR><BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WDT_Configure
</UL>

<P><STRONG><a name="[83]"></a>HAL_SCU_Timer1n_ClockConfig</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, a31g21x_hal_scu.o(i.HAL_SCU_Timer1n_ClockConfig))
<BR><BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER1n_Configure
</UL>

<P><STRONG><a name="[88]"></a>HAL_SCU_Timer30_ClockConfig</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, a31g21x_hal_scu.o(i.HAL_SCU_Timer30_ClockConfig))
<BR><BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER3n_Configure
</UL>

<P><STRONG><a name="[95]"></a>HAL_SCU_WDT_ClockConfig</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, a31g21x_hal_scu.o(i.HAL_SCU_WDT_ClockConfig))
<BR><BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WDT_Configure
</UL>

<P><STRONG><a name="[81]"></a>HAL_TIMER1n_ClearMatchInterrupt</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, a31g21x_hal_timer1n.o(i.HAL_TIMER1n_ClearMatchInterrupt))
<BR><BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER10_IRQHandler_IT
</UL>

<P><STRONG><a name="[86]"></a>HAL_TIMER1n_Cmd</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, a31g21x_hal_timer1n.o(i.HAL_TIMER1n_Cmd))
<BR><BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER1n_Configure
</UL>

<P><STRONG><a name="[85]"></a>HAL_TIMER1n_ConfigInterrupt</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, a31g21x_hal_timer1n.o(i.HAL_TIMER1n_ConfigInterrupt))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_TIMER1n_ConfigInterrupt
</UL>
<BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER1n_Configure
</UL>

<P><STRONG><a name="[7e]"></a>HAL_TIMER1n_GetMatchInterrupt</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, a31g21x_hal_timer1n.o(i.HAL_TIMER1n_GetMatchInterrupt))
<BR><BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER10_IRQHandler_IT
</UL>

<P><STRONG><a name="[84]"></a>HAL_TIMER1n_Init</STRONG> (Thumb, 432 bytes, Stack size 24 bytes, a31g21x_hal_timer1n.o(i.HAL_TIMER1n_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_TIMER1n_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER1n_Configure
</UL>

<P><STRONG><a name="[89]"></a>HAL_TIMER3n_Init</STRONG> (Thumb, 82 bytes, Stack size 0 bytes, a31g21x_hal_timer30.o(i.HAL_TIMER3n_Init))
<BR><BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER3n_Configure
</UL>

<P><STRONG><a name="[8c]"></a>HAL_TIMER3n_OutputCtrl</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, a31g21x_hal_timer30.o(i.HAL_TIMER3n_OutputCtrl))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_TIMER3n_OutputCtrl
</UL>
<BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER3n_Configure
</UL>

<P><STRONG><a name="[8b]"></a>HAL_TIMER3n_SetADuty</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, a31g21x_hal_timer30.o(i.HAL_TIMER3n_SetADuty))
<BR><BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sound_loop
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER3n_Configure
</UL>

<P><STRONG><a name="[8a]"></a>HAL_TIMER3n_SetPeriod</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, a31g21x_hal_timer30.o(i.HAL_TIMER3n_SetPeriod))
<BR><BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sound_loop
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER3n_Configure
</UL>

<P><STRONG><a name="[ed]"></a>HAL_TIMER3n_Start</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, a31g21x_hal_timer30.o(i.HAL_TIMER3n_Start))
<BR><BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sound_loop
</UL>

<P><STRONG><a name="[91]"></a>HAL_USART_ConfigInterrupt</STRONG> (Thumb, 68 bytes, Stack size 12 bytes, a31g21x_hal_usart1n.o(i.HAL_USART_ConfigInterrupt))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = HAL_USART_ConfigInterrupt
</UL>
<BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_USART11Configure
</UL>

<P><STRONG><a name="[92]"></a>HAL_USART_Enable</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, a31g21x_hal_usart1n.o(i.HAL_USART_Enable))
<BR><BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_USART11Configure
</UL>

<P><STRONG><a name="[6f]"></a>HAL_USART_Init</STRONG> (Thumb, 354 bytes, Stack size 16 bytes, a31g21x_hal_usart1n.o(i.HAL_USART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HAL_USART_Init &rArr; HAL_USART_set_divisors
</UL>
<BR>[Calls]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_USART_set_divisors
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_USART_ReceiveByte
</UL>
<BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_USART11Configure
</UL>

<P><STRONG><a name="[71]"></a>HAL_USART_ReceiveByte</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, a31g21x_hal_usart1n.o(i.HAL_USART_ReceiveByte))
<BR><BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_USART_Init
</UL>

<P><STRONG><a name="[90]"></a>HAL_USART_UART_Mode_Config</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, a31g21x_hal_usart1n.o(i.HAL_USART_UART_Mode_Config))
<BR><BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_USART11Configure
</UL>

<P><STRONG><a name="[70]"></a>HAL_USART_set_divisors</STRONG> (Thumb, 28 bytes, Stack size 24 bytes, a31g21x_hal_usart1n.o(i.HAL_USART_set_divisors))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_USART_set_divisors
</UL>
<BR>[Calls]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_USART_Init
</UL>

<P><STRONG><a name="[98]"></a>HAL_WDT_Init</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, a31g21x_hal_wdt.o(i.HAL_WDT_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_WDT_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WDT_Configure
</UL>

<P><STRONG><a name="[9a]"></a>HAL_WDT_Start</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, a31g21x_hal_wdt.o(i.HAL_WDT_Start))
<BR><BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WDT_ResetRun
</UL>

<P><STRONG><a name="[20]"></a>HardFault_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, irq.o(i.HardFault_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_a31g21x.o(RESET)
</UL>
<P><STRONG><a name="[72]"></a>I2C_Configure</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, hal.o(i.I2C_Configure))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = I2C_Configure &rArr; HAL_I2C_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Init
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_DeInit
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_start
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_data
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;load_data
</UL>

<P><STRONG><a name="[cc]"></a>I2C_read</STRONG> (Thumb, 444 bytes, Stack size 16 bytes, hal.o(i.I2C_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = I2C_read
</UL>
<BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;load_data
</UL>

<P><STRONG><a name="[e3]"></a>I2C_write</STRONG> (Thumb, 328 bytes, Stack size 16 bytes, hal.o(i.I2C_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = I2C_write
</UL>
<BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_data
</UL>

<P><STRONG><a name="[74]"></a>Init</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, init.o(i.Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Init &rArr; SystemClock_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_GPIO
</UL>
<BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[75]"></a>Init_GPIO</STRONG> (Thumb, 476 bytes, Stack size 0 bytes, init.o(i.Init_GPIO))
<BR><BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init
</UL>

<P><STRONG><a name="[a9]"></a>IsEmpty</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, queue.o(i.IsEmpty))
<BR><BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;deleteq
</UL>

<P><STRONG><a name="[77]"></a>IsFull</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, queue.o(i.IsFull))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = IsFull &rArr; __aeabi_idivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addq
</UL>

<P><STRONG><a name="[78]"></a>ProgramPage</STRONG> (Thumb, 152 bytes, Stack size 16 bytes, flash.o(i.ProgramPage))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ProgramPage
</UL>
<BR>[Calls]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__FLASH_ALL_ENABLE
</UL>
<BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tt_flash_iap_pgm
</UL>

<P><STRONG><a name="[7a]"></a>SysTick_ExceptionHandler_IT</STRONG> (Thumb, 80 bytes, Stack size 8 bytes, main.o(i.SysTick_ExceptionHandler_IT))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SysTick_ExceptionHandler_IT
</UL>
<BR>[Calls]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decrease_msdelay1
</UL>
<BR>[Called By]<UL><LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[23]"></a>SysTick_Handler</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, irq.o(i.SysTick_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SysTick_Handler &rArr; SysTick_ExceptionHandler_IT
</UL>
<BR>[Calls]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_ExceptionHandler_IT
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_a31g21x.o(RESET)
</UL>
<P><STRONG><a name="[76]"></a>SystemClock_Config</STRONG> (Thumb, 164 bytes, Stack size 16 bytes, systemclock.o(i.SystemClock_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SystemClock_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SCU_HSI_ClockConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init
</UL>

<P><STRONG><a name="[41]"></a>SystemCoreClockUpdate</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, system_a31g21x.o(i.SystemCoreClockUpdate))
<BR>[Address Reference Count : 1]<UL><LI> startup_a31g21x.o(.text)
</UL>
<P><STRONG><a name="[40]"></a>SystemInit</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, system_a31g21x.o(i.SystemInit))
<BR>[Address Reference Count : 1]<UL><LI> startup_a31g21x.o(.text)
</UL>
<P><STRONG><a name="[2b]"></a>TIMER10_IRQHandler</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, irq.o(i.TIMER10_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = TIMER10_IRQHandler &rArr; TIMER10_IRQHandler_IT &rArr; task_100us_interrupt &rArr; sensing_loop &rArr; get_avg_f &rArr; __aeabi_fdiv
</UL>
<BR>[Calls]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER10_IRQHandler_IT
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_a31g21x.o(RESET)
</UL>
<P><STRONG><a name="[7d]"></a>TIMER10_IRQHandler_IT</STRONG> (Thumb, 86 bytes, Stack size 8 bytes, hal.o(i.TIMER10_IRQHandler_IT))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = TIMER10_IRQHandler_IT &rArr; task_100us_interrupt &rArr; sensing_loop &rArr; get_avg_f &rArr; __aeabi_fdiv
</UL>
<BR>[Calls]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_1ms_interrupt
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_100us_interrupt
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMER1n_GetMatchInterrupt
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMER1n_ClearMatchInterrupt
</UL>
<BR>[Called By]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER10_IRQHandler
</UL>

<P><STRONG><a name="[82]"></a>TIMER1n_Configure</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, hal.o(i.TIMER1n_Configure))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = TIMER1n_Configure &rArr; HAL_TIMER1n_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMER1n_Init
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMER1n_ConfigInterrupt
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMER1n_Cmd
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SCU_Timer1n_ClockConfig
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SetPriority
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_EnableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_start
</UL>

<P><STRONG><a name="[87]"></a>TIMER3n_Configure</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, hal.o(i.TIMER3n_Configure))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = TIMER3n_Configure &rArr; HAL_TIMER3n_OutputCtrl
</UL>
<BR>[Calls]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMER3n_SetPeriod
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMER3n_SetADuty
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMER3n_OutputCtrl
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMER3n_Init
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SCU_Timer30_ClockConfig
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_start
</UL>

<P><STRONG><a name="[8d]"></a>UART11_IRQHandler_IT</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, hal.o(i.UART11_IRQHandler_IT))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = UART11_IRQHandler_IT &rArr; addq &rArr; IsFull &rArr; __aeabi_idivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addq
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART11_IRQHandler
</UL>

<P><STRONG><a name="[8f]"></a>UART_USART11Configure</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, hal.o(i.UART_USART11Configure))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = UART_USART11Configure &rArr; HAL_USART_Init &rArr; HAL_USART_set_divisors
</UL>
<BR>[Calls]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_USART_UART_Mode_Config
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_USART_Init
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_USART_Enable
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_USART_ConfigInterrupt
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SetPriority
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_EnableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_start
</UL>

<P><STRONG><a name="[35]"></a>USART11_IRQHandler</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, irq.o(i.USART11_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = USART11_IRQHandler &rArr; UART11_IRQHandler_IT &rArr; addq &rArr; IsFull &rArr; __aeabi_idivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART11_IRQHandler_IT
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_a31g21x.o(RESET)
</UL>
<P><STRONG><a name="[93]"></a>WDT_Configure</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, hal.o(i.WDT_Configure))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = WDT_Configure &rArr; HAL_WDT_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_WDT_Init
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SCU_WDT_ClockConfig
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SCU_SetResetSrc
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SCU_LSI_ClockConfig
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SCU_ClearResetStatus
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setting_factort_reset
<LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setting_exit
</UL>

<P><STRONG><a name="[99]"></a>WDT_ResetRun</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, hal.o(i.WDT_ResetRun))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = WDT_ResetRun
</UL>
<BR>[Calls]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_WDT_Start
</UL>
<BR>[Called By]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setting_factort_reset
<LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setting_exit
</UL>

<P><STRONG><a name="[9c]"></a>__ARM_common_switch8</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, app_ctl.o(i.__ARM_common_switch8))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __ARM_common_switch8
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;analysis_packet
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_sensor_enable
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_snr_state_modbud
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_st_relay
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_st_error_t
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;normal
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init
</UL>

<P><STRONG><a name="[79]"></a>__FLASH_ALL_ENABLE</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, flash.o(i.__FLASH_ALL_ENABLE))
<BR><BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgramPage
</UL>

<P><STRONG><a name="[8e]"></a>addq</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, queue.o(i.addq))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = addq &rArr; IsFull &rArr; __aeabi_idivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsFull
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART11_IRQHandler_IT
</UL>

<P><STRONG><a name="[9b]"></a>analysis_packet</STRONG> (Thumb, 608 bytes, Stack size 16 bytes, modbus.o(i.analysis_packet))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = analysis_packet &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_app_data
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crc16_modbus
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
</UL>
<BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modbus_loop
</UL>

<P><STRONG><a name="[9f]"></a>app_data_reset</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, app_data.o(i.app_data_reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = app_data_reset &rArr; beep_on
</UL>
<BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;beep_on
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_sys_config_bit
</UL>
<BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;format_eeprom
</UL>

<P><STRONG><a name="[a2]"></a>app_task</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, app_ctl.o(i.app_task))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = app_task &rArr; normal &rArr; itoa &rArr; __aeabi_idivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setting
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;normal
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init
</UL>
<BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_100ms
</UL>

<P><STRONG><a name="[f3]"></a>beep_alram</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, sound.o(i.beep_alram))
<BR><BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_st_relay
</UL>

<P><STRONG><a name="[c2]"></a>beep_buzzer</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, sound.o(i.beep_buzzer))
<BR><BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_get_key
</UL>

<P><STRONG><a name="[a1]"></a>beep_on</STRONG> (Thumb, 20 bytes, Stack size 4 bytes, sound.o(i.beep_on))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = beep_on
</UL>
<BR>[Calls]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;beep_stop
</UL>
<BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_data_reset
<LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setting_buzzer
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;load_all_data
</UL>

<P><STRONG><a name="[a6]"></a>beep_stop</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, sound.o(i.beep_stop))
<BR><BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;beep_on
</UL>

<P><STRONG><a name="[c3]"></a>cheak_data</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, app_data.o(i.cheak_data))
<BR><BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init
</UL>

<P><STRONG><a name="[9e]"></a>crc16_modbus</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, modbus.o(i.crc16_modbus))
<BR><BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crc16_modbus_with_size
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;analysis_packet
</UL>

<P><STRONG><a name="[a7]"></a>crc16_modbus_with_size</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, modbus.o(i.crc16_modbus_with_size))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = crc16_modbus_with_size
</UL>
<BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crc16_modbus
</UL>
<BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_single_data
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_respone_single_reg
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_reg
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_packet
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_errorcode
</UL>

<P><STRONG><a name="[e7]"></a>crrent_sensor_onoff</STRONG> (Thumb, 98 bytes, Stack size 0 bytes, sensor.o(i.crrent_sensor_onoff))
<BR><BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensing_loop
</UL>

<P><STRONG><a name="[7b]"></a>decrease_msdelay1</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, hal.o(i.decrease_msdelay1))
<BR><BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_ExceptionHandler_IT
</UL>

<P><STRONG><a name="[ac]"></a>delay</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, hal.o(i.delay))
<BR><BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;format_eeprom
</UL>

<P><STRONG><a name="[a8]"></a>deleteq</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, queue.o(i.deleteq))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = deleteq &rArr; __aeabi_idivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsEmpty
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modbus_loop
</UL>

<P><STRONG><a name="[c6]"></a>escape_msdelay1</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, hal.o(i.escape_msdelay1))
<BR><BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modbus_loop
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init
</UL>

<P><STRONG><a name="[c8]"></a>fnd_put</STRONG> (Thumb, 206 bytes, Stack size 12 bytes, fnd.o(i.fnd_put))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = fnd_put
</UL>
<BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;normal
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init
</UL>

<P><STRONG><a name="[62]"></a>fnd_put_line</STRONG> (Thumb, 156 bytes, Stack size 16 bytes, fnd.o(i.fnd_put_line))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = fnd_put_line
</UL>
<BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
<LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setting_snr_sv_max2
<LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setting_snr_sv_max1
<LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setting_snr_pt2
<LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setting_snr_pt1
<LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setting_snr_min2
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setting_snr_min1
<LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setting_snr_dt2
<LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setting_snr_dt1
<LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setting_short_sv2
<LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setting_short_sv1
<LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setting_short_chk
<LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setting_relay_out_md
<LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setting_recovery_md
<LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setting_normal2
<LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setting_normal1
<LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setting_modbus_v
<LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setting_modbus_id
<LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setting_h2o_rel
<LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setting_h2o_dry
<LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setting_factort_reset
<LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setting_exit
<LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setting_buzzer
<LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setting_broken_sv2
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setting_broken_sv1
<LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setting_broken_chk
</UL>

<P><STRONG><a name="[eb]"></a>fnd_put_point</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, fnd.o(i.fnd_put_point))
<BR><BR>[Called By]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setting_snr_sv_max2
<LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setting_snr_sv_max1
<LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setting_snr_pt2
<LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setting_snr_pt1
<LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setting_snr_min2
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setting_snr_min1
<LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setting_snr_dt2
<LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setting_snr_dt1
<LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setting_short_sv2
<LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setting_short_sv1
<LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setting_normal2
<LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setting_normal1
<LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setting_broken_sv2
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setting_broken_sv1
</UL>

<P><STRONG><a name="[61]"></a>fnd_set_blink</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, fnd.o(i.fnd_set_blink))
<BR><BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
<LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setting_snr_sv_max2
<LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setting_snr_sv_max1
<LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setting_snr_pt2
<LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setting_snr_pt1
<LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setting_snr_min2
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setting_snr_min1
<LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setting_snr_dt2
<LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setting_snr_dt1
<LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setting_short_sv2
<LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setting_short_sv1
<LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setting_short_chk
<LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setting_relay_out_md
<LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setting_recovery_md
<LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setting_normal2
<LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setting_normal1
<LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setting_modbus_v
<LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setting_modbus_id
<LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setting_h2o_rel
<LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setting_h2o_dry
<LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setting_factort_reset
<LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setting_buzzer
<LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setting_broken_sv2
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setting_broken_sv1
<LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setting_broken_chk
</UL>

<P><STRONG><a name="[aa]"></a>format_eeprom</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, app_data.o(i.format_eeprom))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = format_eeprom &rArr; save_data &rArr; I2C_Configure &rArr; HAL_I2C_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_data
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_data_reset
</UL>
<BR>[Called By]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setting_factort_reset
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init
</UL>

<P><STRONG><a name="[ad]"></a>get_ADC_data</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, hal.o(i.get_ADC_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = get_ADC_data
</UL>
<BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_Start
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_GetStatus
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_GetData
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_ClearStatus
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_ChannelSel
</UL>
<BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensing
</UL>

<P><STRONG><a name="[9d]"></a>get_app_data</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, app_data.o(i.get_app_data))
<BR><BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_snr_st
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_single_data
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_respone_single_reg
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_reg
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_packet
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_errorcode
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;analysis_packet
<LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setting_modbus_id
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_snr_state_modbud
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_st_relay
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_st_error_t
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;normal
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memory_map_update
</UL>

<P><STRONG><a name="[bc]"></a>get_app_data_ch</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, app_data.o(i.get_app_data_ch))
<BR><BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_snr_st
<LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setting_snr_sv_max2
<LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setting_snr_sv_max1
<LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setting_snr_pt2
<LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setting_snr_pt1
<LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setting_snr_min2
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setting_snr_min1
<LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setting_snr_dt2
<LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setting_snr_dt1
<LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setting_short_sv2
<LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setting_short_sv1
<LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setting_normal2
<LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setting_normal1
<LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setting_modbus_v
<LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setting_broken_sv2
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setting_broken_sv1
</UL>

<P><STRONG><a name="[be]"></a>get_auto_rcv_off</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, app_normal.o(i.get_auto_rcv_off))
<BR><BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_snr_st
</UL>

<P><STRONG><a name="[b3]"></a>get_avg</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, sensor.o(i.get_avg))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = get_avg
</UL>
<BR>[Calls]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensing_loop
</UL>

<P><STRONG><a name="[b4]"></a>get_avg_f</STRONG> (Thumb, 48 bytes, Stack size 32 bytes, sensor.o(i.get_avg_f))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = get_avg_f &rArr; __aeabi_fdiv
</UL>
<BR>[Calls]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
</UL>
<BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensing_loop
</UL>

<P><STRONG><a name="[b8]"></a>get_charging_high_impedance</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, sensor.o(i.get_charging_high_impedance))
<BR><BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_snr_st
</UL>

<P><STRONG><a name="[b7]"></a>get_charging_low_impedance</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, sensor.o(i.get_charging_low_impedance))
<BR><BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_snr_st
</UL>

<P><STRONG><a name="[d6]"></a>get_diff_dis_impedance</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, app_sensing.o(i.get_diff_dis_impedance))
<BR><BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memory_map_update
</UL>

<P><STRONG><a name="[c1]"></a>get_key</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, key.o(i.get_key))
<BR><BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_get_key
</UL>

<P><STRONG><a name="[df]"></a>get_last_err_code</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, modbus.o(i.get_last_err_code))
<BR><BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modbus_loop
</UL>

<P><STRONG><a name="[b6]"></a>get_snr_st</STRONG> (Thumb, 834 bytes, Stack size 56 bytes, app_sensing.o(i.get_snr_st))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = get_snr_st &rArr; __aeabi_fdiv
</UL>
<BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_sensor_on
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_charging_low_impedance
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_charging_high_impedance
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_auto_rcv_off
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_app_data_ch
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_app_data
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_sys_config_bit
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2iz
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_st_data
</UL>

<P><STRONG><a name="[bf]"></a>get_snr_state_modbud</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, app_normal.o(i.get_snr_state_modbud))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = get_snr_state_modbud &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_app_data
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
</UL>
<BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memory_map_update
</UL>

<P><STRONG><a name="[d5]"></a>get_snr_total_impedance</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, app_sensing.o(i.get_snr_total_impedance))
<BR><BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;normal
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memory_map_update
</UL>

<P><STRONG><a name="[a0]"></a>get_sys_config_bit</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, app_data.o(i.get_sys_config_bit))
<BR><BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_snr_st
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_get_key
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_data_reset
<LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setting_short_chk
<LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setting_relay_out_md
<LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setting_recovery_md
<LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setting_h2o_rel
<LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setting_h2o_dry
<LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setting_buzzer
<LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setting_broken_chk
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;relay_out
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_st_relay
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_st_error_t
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;load_all_data
</UL>

<P><STRONG><a name="[c0]"></a>hal_get_key</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, hal.o(i.hal_get_key))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = hal_get_key
</UL>
<BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_sys_config_bit
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_key
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;beep_buzzer
</UL>
<BR>[Called By]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setting_snr_sv_max2
<LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setting_snr_sv_max1
<LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setting_snr_pt2
<LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setting_snr_pt1
<LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setting_snr_min2
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setting_snr_min1
<LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setting_snr_dt2
<LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setting_snr_dt1
<LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setting_short_sv2
<LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setting_short_sv1
<LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setting_short_chk
<LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setting_relay_out_md
<LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setting_recovery_md
<LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setting_normal2
<LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setting_normal1
<LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setting_modbus_v
<LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setting_modbus_id
<LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setting_h2o_rel
<LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setting_h2o_dry
<LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setting_factort_reset
<LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setting_exit
<LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setting_buzzer
<LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setting_broken_sv2
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setting_broken_sv1
<LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setting_broken_chk
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;normal
</UL>

<P><STRONG><a name="[a3]"></a>init</STRONG> (Thumb, 186 bytes, Stack size 16 bytes, app_ctl.o(i.init))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = init &rArr; load_all_data &rArr; load_data &rArr; I2C_Configure &rArr; HAL_I2C_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_sensor_on
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;opening_buzzer
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_msdelay1
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;escape_msdelay1
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;load_all_data
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_sensor_ready
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;format_eeprom
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fnd_put
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cheak_data
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMC_WriteEraseRun
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_task
</UL>

<P><STRONG><a name="[c9]"></a>is_sensor_ready</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, sensor.o(i.is_sensor_ready))
<BR><BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_1000ms
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init
</UL>

<P><STRONG><a name="[ca]"></a>itoa</STRONG> (Thumb, 84 bytes, Stack size 48 bytes, fnd.o(i.itoa))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = itoa &rArr; __aeabi_idivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setting_snr_sv_max2
<LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setting_snr_sv_max1
<LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setting_snr_pt2
<LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setting_snr_pt1
<LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setting_snr_min2
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setting_snr_min1
<LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setting_snr_dt2
<LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setting_snr_dt1
<LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setting_short_sv2
<LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setting_short_sv1
<LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setting_normal2
<LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setting_normal1
<LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setting_modbus_id
<LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setting_factort_reset
<LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setting_broken_sv2
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setting_broken_sv1
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;normal
</UL>

<P><STRONG><a name="[f2]"></a>key_loop</STRONG> (Thumb, 352 bytes, Stack size 0 bytes, key.o(i.key_loop))
<BR><BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_10ms
</UL>

<P><STRONG><a name="[c4]"></a>load_all_data</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, app_data.o(i.load_all_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = load_all_data &rArr; load_data &rArr; I2C_Configure &rArr; HAL_I2C_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;beep_on
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_sys_config_bit
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;load_data
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init
</UL>

<P><STRONG><a name="[cb]"></a>load_data</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, app_data.o(i.load_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = load_data &rArr; I2C_Configure &rArr; HAL_I2C_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_read
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Configure
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;load_all_data
</UL>

<P><STRONG><a name="[4c]"></a>main</STRONG> (Thumb, 168 bytes, Stack size 0 bytes, main.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = main &rArr; task_idle &rArr; modbus_loop &rArr; modbus_save_data &rArr; set_app_data &rArr; save_data &rArr; I2C_Configure &rArr; HAL_I2C_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_start
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_idle
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_1ms
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_10ms
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_100ms
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_1000ms
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SetPriority
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[d4]"></a>memory_map_update</STRONG> (Thumb, 116 bytes, Stack size 16 bytes, modbus.o(i.memory_map_update))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = memory_map_update &rArr; get_snr_state_modbud &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_app_data
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_snr_total_impedance
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_diff_dis_impedance
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_snr_state_modbud
</UL>
<BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_100ms
</UL>

<P><STRONG><a name="[d7]"></a>modbus_loop</STRONG> (Thumb, 516 bytes, Stack size 16 bytes, modbus.o(i.modbus_loop))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = modbus_loop &rArr; modbus_save_data &rArr; set_app_data &rArr; save_data &rArr; I2C_Configure &rArr; HAL_I2C_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_tx
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_msdelay1
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;escape_msdelay1
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_single_data
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_respone_single_reg
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_reg
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_packet
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_errorcode
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modbus_time_refresh
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modbus_save_data
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_last_err_code
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;analysis_packet
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;deleteq
</UL>
<BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_idle
</UL>

<P><STRONG><a name="[dc]"></a>modbus_save_data</STRONG> (Thumb, 84 bytes, Stack size 32 bytes, modbus.o(i.modbus_save_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = modbus_save_data &rArr; set_app_data &rArr; save_data &rArr; I2C_Configure &rArr; HAL_I2C_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_app_data
</UL>
<BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modbus_loop
</UL>

<P><STRONG><a name="[f1]"></a>modbus_time_out</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, modbus.o(i.modbus_time_out))
<BR><BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_100ms
</UL>

<P><STRONG><a name="[d8]"></a>modbus_time_refresh</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, modbus.o(i.modbus_time_refresh))
<BR><BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modbus_loop
</UL>

<P><STRONG><a name="[a4]"></a>normal</STRONG> (Thumb, 356 bytes, Stack size 24 bytes, app_normal.o(i.normal))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = normal &rArr; itoa &rArr; __aeabi_idivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_app_data
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_snr_total_impedance
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_get_key
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;itoa
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fnd_put
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_task
</UL>

<P><STRONG><a name="[c7]"></a>opening_buzzer</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, sound.o(i.opening_buzzer))
<BR><BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init
</UL>

<P><STRONG><a name="[e2]"></a>relay_out</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, io.o(i.relay_out))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = relay_out
</UL>
<BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_sys_config_bit
</UL>
<BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_st_relay
</UL>

<P><STRONG><a name="[ab]"></a>save_data</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, app_data.o(i.save_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = save_data &rArr; I2C_Configure &rArr; HAL_I2C_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_write
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Configure
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_sys_config_bit
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_app_data_ch
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_app_data
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;format_eeprom
</UL>

<P><STRONG><a name="[db]"></a>send_errorcode</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, modbus.o(i.send_errorcode))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = send_errorcode &rArr; crc16_modbus_with_size
</UL>
<BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_app_data
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crc16_modbus_with_size
</UL>
<BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modbus_loop
</UL>

<P><STRONG><a name="[d9]"></a>send_packet</STRONG> (Thumb, 150 bytes, Stack size 32 bytes, modbus.o(i.send_packet))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = send_packet &rArr; crc16_modbus_with_size
</UL>
<BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_app_data
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crc16_modbus_with_size
</UL>
<BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modbus_loop
</UL>

<P><STRONG><a name="[da]"></a>send_reg</STRONG> (Thumb, 144 bytes, Stack size 32 bytes, modbus.o(i.send_reg))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = send_reg &rArr; crc16_modbus_with_size
</UL>
<BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_app_data
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crc16_modbus_with_size
</UL>
<BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modbus_loop
</UL>

<P><STRONG><a name="[dd]"></a>send_respone_single_reg</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, modbus.o(i.send_respone_single_reg))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = send_respone_single_reg &rArr; crc16_modbus_with_size
</UL>
<BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_app_data
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crc16_modbus_with_size
</UL>
<BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modbus_loop
</UL>

<P><STRONG><a name="[de]"></a>send_single_data</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, modbus.o(i.send_single_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = send_single_data &rArr; crc16_modbus_with_size
</UL>
<BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_app_data
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crc16_modbus_with_size
</UL>
<BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modbus_loop
</UL>

<P><STRONG><a name="[e4]"></a>sensing</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, sensor.o(i.sensing))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = sensing &rArr; get_ADC_data
</UL>
<BR>[Calls]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_ADC_data
</UL>
<BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensing_loop
</UL>

<P><STRONG><a name="[e5]"></a>sensing_loop</STRONG> (Thumb, 562 bytes, Stack size 8 bytes, sensor.o(i.sensing_loop))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = sensing_loop &rArr; get_avg_f &rArr; __aeabi_fdiv
</UL>
<BR>[Calls]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_sensor_sw_enable
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_sensor_enable
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensing
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_avg_f
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_avg
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crrent_sensor_onoff
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_100us_interrupt
</UL>

<P><STRONG><a name="[e1]"></a>set_app_data</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, app_data.o(i.set_app_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = set_app_data &rArr; save_data &rArr; I2C_Configure &rArr; HAL_I2C_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_data
</UL>
<BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modbus_save_data
<LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setting_modbus_id
</UL>

<P><STRONG><a name="[e9]"></a>set_app_data_ch</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, app_data.o(i.set_app_data_ch))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = set_app_data_ch &rArr; save_data &rArr; I2C_Configure &rArr; HAL_I2C_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_data
</UL>
<BR>[Called By]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setting_snr_sv_max2
<LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setting_snr_sv_max1
<LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setting_snr_pt2
<LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setting_snr_pt1
<LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setting_snr_min2
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setting_snr_min1
<LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setting_snr_dt2
<LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setting_snr_dt1
<LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setting_short_sv2
<LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setting_short_sv1
<LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setting_normal2
<LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setting_normal1
<LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setting_modbus_v
<LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setting_broken_sv2
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setting_broken_sv1
</UL>

<P><STRONG><a name="[c5]"></a>set_msdelay1</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, hal.o(i.set_msdelay1))
<BR><BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modbus_loop
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init
</UL>

<P><STRONG><a name="[e8]"></a>set_sensor_enable</STRONG> (Thumb, 60 bytes, Stack size 4 bytes, sensor.o(i.set_sensor_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = set_sensor_enable &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
</UL>
<BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensing_loop
</UL>

<P><STRONG><a name="[bd]"></a>set_sensor_on</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, sensor.o(i.set_sensor_on))
<BR><BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_snr_st
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init
</UL>

<P><STRONG><a name="[e6]"></a>set_sensor_sw_enable</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, sensor.o(i.set_sensor_sw_enable))
<BR><BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensing_loop
</UL>

<P><STRONG><a name="[ea]"></a>set_sys_config_bit</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, app_data.o(i.set_sys_config_bit))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = set_sys_config_bit &rArr; save_data &rArr; I2C_Configure &rArr; HAL_I2C_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_data
</UL>
<BR>[Called By]<UL><LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setting_short_chk
<LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setting_relay_out_md
<LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setting_recovery_md
<LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setting_h2o_rel
<LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setting_h2o_dry
<LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setting_buzzer
<LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setting_broken_chk
</UL>

<P><STRONG><a name="[a5]"></a>setting</STRONG> (Thumb, 106 bytes, Stack size 16 bytes, app_setting.o(i.setting))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = setting &rArr; __aeabi_idivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_task
</UL>

<P><STRONG><a name="[15]"></a>setting_broken_chk</STRONG> (Thumb, 164 bytes, Stack size 16 bytes, app_setting.o(i.setting_broken_chk))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = setting_broken_chk &rArr; set_sys_config_bit &rArr; save_data &rArr; I2C_Configure &rArr; HAL_I2C_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_sys_config_bit
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fnd_set_blink
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fnd_put_line
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_get_key
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_sys_config_bit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_setting.o(.data)
</UL>
<P><STRONG><a name="[f]"></a>setting_broken_sv1</STRONG> (Thumb, 362 bytes, Stack size 24 bytes, app_setting.o(i.setting_broken_sv1))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = setting_broken_sv1 &rArr; set_app_data_ch &rArr; save_data &rArr; I2C_Configure &rArr; HAL_I2C_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_app_data_ch
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fnd_set_blink
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fnd_put_line
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_get_key
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_app_data_ch
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fnd_put_point
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;itoa
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_setting.o(.data)
</UL>
<P><STRONG><a name="[10]"></a>setting_broken_sv2</STRONG> (Thumb, 362 bytes, Stack size 24 bytes, app_setting.o(i.setting_broken_sv2))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = setting_broken_sv2 &rArr; set_app_data_ch &rArr; save_data &rArr; I2C_Configure &rArr; HAL_I2C_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_app_data_ch
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fnd_set_blink
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fnd_put_line
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_get_key
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_app_data_ch
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fnd_put_point
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;itoa
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_setting.o(.data)
</UL>
<P><STRONG><a name="[17]"></a>setting_buzzer</STRONG> (Thumb, 176 bytes, Stack size 16 bytes, app_setting.o(i.setting_buzzer))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = setting_buzzer &rArr; set_sys_config_bit &rArr; save_data &rArr; I2C_Configure &rArr; HAL_I2C_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;beep_on
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_sys_config_bit
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fnd_set_blink
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fnd_put_line
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_get_key
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_sys_config_bit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_setting.o(.data)
</UL>
<P><STRONG><a name="[1d]"></a>setting_exit</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, app_setting.o(i.setting_exit))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = setting_exit &rArr; WDT_Configure &rArr; HAL_WDT_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fnd_put_line
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_get_key
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WDT_ResetRun
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WDT_Configure
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_setting.o(.data)
</UL>
<P><STRONG><a name="[1c]"></a>setting_factort_reset</STRONG> (Thumb, 344 bytes, Stack size 24 bytes, app_setting.o(i.setting_factort_reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = setting_factort_reset &rArr; format_eeprom &rArr; save_data &rArr; I2C_Configure &rArr; HAL_I2C_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fnd_set_blink
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fnd_put_line
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_get_key
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WDT_ResetRun
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WDT_Configure
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;itoa
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;format_eeprom
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_setting.o(.data)
</UL>
<P><STRONG><a name="[14]"></a>setting_h2o_dry</STRONG> (Thumb, 164 bytes, Stack size 16 bytes, app_setting.o(i.setting_h2o_dry))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = setting_h2o_dry &rArr; set_sys_config_bit &rArr; save_data &rArr; I2C_Configure &rArr; HAL_I2C_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_sys_config_bit
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fnd_set_blink
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fnd_put_line
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_get_key
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_sys_config_bit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_setting.o(.data)
</UL>
<P><STRONG><a name="[13]"></a>setting_h2o_rel</STRONG> (Thumb, 158 bytes, Stack size 16 bytes, app_setting.o(i.setting_h2o_rel))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = setting_h2o_rel &rArr; set_sys_config_bit &rArr; save_data &rArr; I2C_Configure &rArr; HAL_I2C_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_sys_config_bit
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fnd_set_blink
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fnd_put_line
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_get_key
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_sys_config_bit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_setting.o(.data)
</UL>
<P><STRONG><a name="[1a]"></a>setting_modbus_id</STRONG> (Thumb, 346 bytes, Stack size 24 bytes, app_setting.o(i.setting_modbus_id))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = setting_modbus_id &rArr; set_app_data &rArr; save_data &rArr; I2C_Configure &rArr; HAL_I2C_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_app_data
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fnd_set_blink
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fnd_put_line
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_get_key
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_app_data
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;itoa
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_setting.o(.data)
</UL>
<P><STRONG><a name="[19]"></a>setting_modbus_v</STRONG> (Thumb, 192 bytes, Stack size 16 bytes, app_setting.o(i.setting_modbus_v))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = setting_modbus_v &rArr; set_app_data_ch &rArr; save_data &rArr; I2C_Configure &rArr; HAL_I2C_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_app_data_ch
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fnd_set_blink
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fnd_put_line
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_get_key
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_app_data_ch
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_setting.o(.data)
</UL>
<P><STRONG><a name="[5]"></a>setting_normal1</STRONG> (Thumb, 362 bytes, Stack size 24 bytes, app_setting.o(i.setting_normal1))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = setting_normal1 &rArr; set_app_data_ch &rArr; save_data &rArr; I2C_Configure &rArr; HAL_I2C_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_app_data_ch
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fnd_set_blink
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fnd_put_line
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_get_key
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_app_data_ch
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fnd_put_point
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;itoa
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_setting.o(.data)
</UL>
<P><STRONG><a name="[6]"></a>setting_normal2</STRONG> (Thumb, 362 bytes, Stack size 24 bytes, app_setting.o(i.setting_normal2))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = setting_normal2 &rArr; set_app_data_ch &rArr; save_data &rArr; I2C_Configure &rArr; HAL_I2C_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_app_data_ch
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fnd_set_blink
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fnd_put_line
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_get_key
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_app_data_ch
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fnd_put_point
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;itoa
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_setting.o(.data)
</UL>
<P><STRONG><a name="[1b]"></a>setting_recovery_md</STRONG> (Thumb, 164 bytes, Stack size 16 bytes, app_setting.o(i.setting_recovery_md))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = setting_recovery_md &rArr; set_sys_config_bit &rArr; save_data &rArr; I2C_Configure &rArr; HAL_I2C_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_sys_config_bit
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fnd_set_blink
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fnd_put_line
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_get_key
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_sys_config_bit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_setting.o(.data)
</UL>
<P><STRONG><a name="[18]"></a>setting_relay_out_md</STRONG> (Thumb, 158 bytes, Stack size 16 bytes, app_setting.o(i.setting_relay_out_md))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = setting_relay_out_md &rArr; set_sys_config_bit &rArr; save_data &rArr; I2C_Configure &rArr; HAL_I2C_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_sys_config_bit
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fnd_set_blink
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fnd_put_line
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_get_key
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_sys_config_bit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_setting.o(.data)
</UL>
<P><STRONG><a name="[16]"></a>setting_short_chk</STRONG> (Thumb, 164 bytes, Stack size 16 bytes, app_setting.o(i.setting_short_chk))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = setting_short_chk &rArr; set_sys_config_bit &rArr; save_data &rArr; I2C_Configure &rArr; HAL_I2C_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_sys_config_bit
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fnd_set_blink
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fnd_put_line
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_get_key
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_sys_config_bit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_setting.o(.data)
</UL>
<P><STRONG><a name="[11]"></a>setting_short_sv1</STRONG> (Thumb, 362 bytes, Stack size 24 bytes, app_setting.o(i.setting_short_sv1))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = setting_short_sv1 &rArr; set_app_data_ch &rArr; save_data &rArr; I2C_Configure &rArr; HAL_I2C_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_app_data_ch
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fnd_set_blink
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fnd_put_line
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_get_key
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_app_data_ch
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fnd_put_point
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;itoa
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_setting.o(.data)
</UL>
<P><STRONG><a name="[12]"></a>setting_short_sv2</STRONG> (Thumb, 362 bytes, Stack size 24 bytes, app_setting.o(i.setting_short_sv2))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = setting_short_sv2 &rArr; set_app_data_ch &rArr; save_data &rArr; I2C_Configure &rArr; HAL_I2C_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_app_data_ch
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fnd_set_blink
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fnd_put_line
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_get_key
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_app_data_ch
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fnd_put_point
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;itoa
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_setting.o(.data)
</UL>
<P><STRONG><a name="[b]"></a>setting_snr_dt1</STRONG> (Thumb, 358 bytes, Stack size 24 bytes, app_setting.o(i.setting_snr_dt1))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = setting_snr_dt1 &rArr; set_app_data_ch &rArr; save_data &rArr; I2C_Configure &rArr; HAL_I2C_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_app_data_ch
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fnd_set_blink
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fnd_put_line
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_get_key
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_app_data_ch
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fnd_put_point
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;itoa
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_setting.o(.data)
</UL>
<P><STRONG><a name="[c]"></a>setting_snr_dt2</STRONG> (Thumb, 358 bytes, Stack size 24 bytes, app_setting.o(i.setting_snr_dt2))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = setting_snr_dt2 &rArr; set_app_data_ch &rArr; save_data &rArr; I2C_Configure &rArr; HAL_I2C_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_app_data_ch
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fnd_set_blink
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fnd_put_line
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_get_key
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_app_data_ch
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fnd_put_point
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;itoa
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_setting.o(.data)
</UL>
<P><STRONG><a name="[7]"></a>setting_snr_min1</STRONG> (Thumb, 362 bytes, Stack size 24 bytes, app_setting.o(i.setting_snr_min1))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = setting_snr_min1 &rArr; set_app_data_ch &rArr; save_data &rArr; I2C_Configure &rArr; HAL_I2C_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_app_data_ch
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fnd_set_blink
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fnd_put_line
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_get_key
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_app_data_ch
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fnd_put_point
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;itoa
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_setting.o(.data)
</UL>
<P><STRONG><a name="[8]"></a>setting_snr_min2</STRONG> (Thumb, 362 bytes, Stack size 24 bytes, app_setting.o(i.setting_snr_min2))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = setting_snr_min2 &rArr; set_app_data_ch &rArr; save_data &rArr; I2C_Configure &rArr; HAL_I2C_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_app_data_ch
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fnd_set_blink
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fnd_put_line
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_get_key
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_app_data_ch
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fnd_put_point
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;itoa
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_setting.o(.data)
</UL>
<P><STRONG><a name="[d]"></a>setting_snr_pt1</STRONG> (Thumb, 358 bytes, Stack size 24 bytes, app_setting.o(i.setting_snr_pt1))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = setting_snr_pt1 &rArr; set_app_data_ch &rArr; save_data &rArr; I2C_Configure &rArr; HAL_I2C_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_app_data_ch
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fnd_set_blink
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fnd_put_line
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_get_key
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_app_data_ch
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fnd_put_point
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;itoa
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_setting.o(.data)
</UL>
<P><STRONG><a name="[e]"></a>setting_snr_pt2</STRONG> (Thumb, 358 bytes, Stack size 24 bytes, app_setting.o(i.setting_snr_pt2))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = setting_snr_pt2 &rArr; set_app_data_ch &rArr; save_data &rArr; I2C_Configure &rArr; HAL_I2C_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_app_data_ch
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fnd_set_blink
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fnd_put_line
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_get_key
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_app_data_ch
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fnd_put_point
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;itoa
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_setting.o(.data)
</UL>
<P><STRONG><a name="[9]"></a>setting_snr_sv_max1</STRONG> (Thumb, 362 bytes, Stack size 24 bytes, app_setting.o(i.setting_snr_sv_max1))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = setting_snr_sv_max1 &rArr; set_app_data_ch &rArr; save_data &rArr; I2C_Configure &rArr; HAL_I2C_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_app_data_ch
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fnd_set_blink
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fnd_put_line
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_get_key
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_app_data_ch
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fnd_put_point
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;itoa
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_setting.o(.data)
</UL>
<P><STRONG><a name="[a]"></a>setting_snr_sv_max2</STRONG> (Thumb, 362 bytes, Stack size 24 bytes, app_setting.o(i.setting_snr_sv_max2))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = setting_snr_sv_max2 &rArr; set_app_data_ch &rArr; save_data &rArr; I2C_Configure &rArr; HAL_I2C_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_app_data_ch
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fnd_set_blink
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fnd_put_line
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_get_key
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_app_data_ch
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fnd_put_point
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;itoa
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_setting.o(.data)
</UL>
<P><STRONG><a name="[ec]"></a>sound_loop</STRONG> (Thumb, 192 bytes, Stack size 8 bytes, sound.o(i.sound_loop))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = sound_loop
</UL>
<BR>[Calls]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMER3n_Start
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMER3n_SetPeriod
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMER3n_SetADuty
</UL>
<BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_1ms
</UL>

<P><STRONG><a name="[d2]"></a>task_1000ms</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, app_ctl.o(i.task_1000ms))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = task_1000ms &rArr; update_st_data &rArr; get_snr_st &rArr; __aeabi_fdiv
</UL>
<BR>[Calls]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_st_relay
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_st_error_t
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_st_data
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_sensor_ready
</UL>
<BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[d1]"></a>task_100ms</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, app_ctl.o(i.task_100ms))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = task_100ms &rArr; app_task &rArr; normal &rArr; itoa &rArr; __aeabi_idivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modbus_time_out
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memory_map_update
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_task
</UL>
<BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[80]"></a>task_100us_interrupt</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, app_ctl.o(i.task_100us_interrupt))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = task_100us_interrupt &rArr; sensing_loop &rArr; get_avg_f &rArr; __aeabi_fdiv
</UL>
<BR>[Calls]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensing_loop
</UL>
<BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER10_IRQHandler_IT
</UL>

<P><STRONG><a name="[d0]"></a>task_10ms</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, app_ctl.o(i.task_10ms))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = task_10ms
</UL>
<BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key_loop
</UL>
<BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[cf]"></a>task_1ms</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, app_ctl.o(i.task_1ms))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = task_1ms &rArr; sound_loop
</UL>
<BR>[Calls]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sound_loop
</UL>
<BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[7f]"></a>task_1ms_interrupt</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, app_ctl.o(i.task_1ms_interrupt))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = task_1ms_interrupt &rArr; FND_loop &rArr; __aeabi_idivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FND_loop
</UL>
<BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER10_IRQHandler_IT
</UL>

<P><STRONG><a name="[d3]"></a>task_idle</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, app_ctl.o(i.task_idle))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = task_idle &rArr; modbus_loop &rArr; modbus_save_data &rArr; set_app_data &rArr; save_data &rArr; I2C_Configure &rArr; HAL_I2C_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modbus_loop
</UL>
<BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[ce]"></a>task_start</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, app_ctl.o(i.task_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = task_start &rArr; UART_USART11Configure &rArr; HAL_USART_Init &rArr; HAL_USART_set_divisors
</UL>
<BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_USART11Configure
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER3n_Configure
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER1n_Configure
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Configure
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Configure
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Configure
</UL>
<BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[64]"></a>tt_flash_iap_pgm</STRONG> (Thumb, 24 bytes, Stack size 24 bytes, hal.o(i.tt_flash_iap_pgm))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = tt_flash_iap_pgm &rArr; ProgramPage
</UL>
<BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgramPage
</UL>
<BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMC_WriteEraseRun
</UL>

<P><STRONG><a name="[e0]"></a>uart_tx</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, hal.o(i.uart_tx))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = uart_tx
</UL>
<BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modbus_loop
</UL>

<P><STRONG><a name="[ee]"></a>update_st_data</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, app_normal.o(i.update_st_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = update_st_data &rArr; get_snr_st &rArr; __aeabi_fdiv
</UL>
<BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_snr_st
</UL>
<BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_1000ms
</UL>

<P><STRONG><a name="[f0]"></a>update_st_error_t</STRONG> (Thumb, 146 bytes, Stack size 8 bytes, app_normal.o(i.update_st_error_t))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = update_st_error_t &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_app_data
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_sys_config_bit
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
</UL>
<BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_1000ms
</UL>

<P><STRONG><a name="[ef]"></a>update_st_relay</STRONG> (Thumb, 644 bytes, Stack size 8 bytes, app_normal.o(i.update_st_relay))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = update_st_relay &rArr; relay_out
</UL>
<BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_app_data
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;beep_alram
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_sys_config_bit
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;relay_out
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
</UL>
<BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_1000ms
</UL>

<P><STRONG><a name="[12b]"></a>__aeabi_fadd</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, faddsub.o(x$fpl$fadd), UNUSED)

<P><STRONG><a name="[f4]"></a>_fadd</STRONG> (Thumb, 134 bytes, Stack size 16 bytes, faddsub.o(x$fpl$fadd), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fsub1
</UL>

<P><STRONG><a name="[ba]"></a>__aeabi_fmul</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, fmul.o(x$fpl$fmul))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_fmul
</UL>
<BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_snr_st
</UL>

<P><STRONG><a name="[12c]"></a>_fmul</STRONG> (Thumb, 172 bytes, Stack size 16 bytes, fmul.o(x$fpl$fmul), UNUSED)

<P><STRONG><a name="[b9]"></a>__aeabi_fsub</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, faddsub.o(x$fpl$fsub))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_fsub
</UL>
<BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_snr_st
</UL>

<P><STRONG><a name="[f6]"></a>_fsub</STRONG> (Thumb, 204 bytes, Stack size 16 bytes, faddsub.o(x$fpl$fsub), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fadd1
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[cd]"></a>NVIC_SetPriority</STRONG> (Thumb, 110 bytes, Stack size 8 bytes, main.o(i.NVIC_SetPriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[60]"></a>NVIC_EnableIRQ</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, hal.o(i.NVIC_EnableIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_USART11Configure
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER1n_Configure
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Configure
</UL>

<P><STRONG><a name="[5f]"></a>NVIC_SetPriority</STRONG> (Thumb, 110 bytes, Stack size 8 bytes, hal.o(i.NVIC_SetPriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_USART11Configure
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER1n_Configure
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Configure
</UL>

<P><STRONG><a name="[3a]"></a>NULL_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_a31g21x.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NULL_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NULL_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_a31g21x.o(RESET)
</UL>
<P><STRONG><a name="[f7]"></a>_fadd1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, faddsub.o(x$fpl$fadd), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fsub
</UL>

<P><STRONG><a name="[f5]"></a>_fsub1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, faddsub.o(x$fpl$fsub), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fadd
</UL>
<P>
<H3>
Undefined Global Symbols
</H3>
<P><STRONG><a name="[59]"></a>_call_atexit_fns</STRONG> (ARM, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>
<HR></body></html>
